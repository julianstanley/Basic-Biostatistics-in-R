library(MASS)
library(ISLR)
install.packages('ISLR')
library(ISLR)
Boston
head(Boston)
fix(Boston)
names(Boston)
?Boston
lm(medv~lstat, Boston)
lm.fit=lm(medv~lstat, data=Boston)
attach(Boston)
lm.fit=lm(medv~lstat)
summary(lm.fit)
setwd("C:/Users/Julian/Desktop/Spring 2018 Classes/Biostatistics")
setwd("C:/Users/Julian/Desktop/Spring 2018 Classes/Biostatistics/Labs/Assignment 2")
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
## Data is also normally distributed
shapiro.test(d3)
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
## Data is also normally distributed
shapiro.test(d3$migration)
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
d3.hist()
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
hist(d3)
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
hist(d3$migration)
## Data is also normally distributed
shapiro.test(d3$migration)
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
hist(d3$migration)
## Data is also normally distributed
qqnorm(d3$migration)
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
hist(d3$migration)
## Data is also normally distributed
qqnorm(d3$migration); qqline(d3$migration)
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
hist(d3$migration)
## Data is also normally distributed
qqnorm(d3$migration); qqline(d3$migration, col = "red")
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
## Although it's not perfectly normal, question assumes that the data is normally distributed
hist(d3$migration)
qqnorm(d3$migration); qqline(d3$migration, col = "red")
d3
east <- subset(d3, coast = "West")
east <- subset(d3, coast = "West")
east
east <- subset(d3, d3["coast"] = "West")
?subset
east <- subset(d3, Coast ==  "West")
d3
d3
east <- subset(d3, coast ==  "West")
east
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "west")
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "west")
west
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "West")
west
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "West")
eastMean <- mean(east$migration)
westMean <- mean(west$migration)
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "West")
eastMean <- mean(east$migration)
westMean <- mean(west$migration)
# Subset d3 into east and west coast components
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "West")
# Take the mean of the east coast and west coast
eastMean <- mean(east$migration)
westMean <- mean(west$migration)
# The east coast has a mean migration rate of 2.47, while the west coast has a mean migration rate of 3.29
print("East:" + eastMean)
# Subset d3 into east and west coast components
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "West")
# Take the mean of the east coast and west coast
eastMean <- mean(east$migration)
westMean <- mean(west$migration)
# The east coast has a mean migration rate of 2.47, while the west coast has a mean migration rate of 3.29
print("East:" + str(eastMean))
# Subset d3 into east and west coast components
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "West")
# Take the mean of the east coast and west coast
eastMean <- mean(east$migration)
westMean <- mean(west$migration)
# The east coast has a mean migration rate of 2.47, while the west coast has a mean migration rate of 3.29
print("East:" + toString(eastMean))
print(paste(c("East:", toString(eastMean)), sep = " "))
print(paste(c("East:", toString(eastMean))))
print(paste("East:", toString(eastMean)))
# Subset d3 into east and west coast components
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "West")
# Take the mean of the east coast and west coast
eastMean <- mean(east$migration)
westMean <- mean(west$migration)
# The east coast has a mean migration rate of 2.47, while the west coast has a mean migration rate of 3.29
print(paste("East:", toString(eastMean)))
print(paste("West", toString(westMean)))
# Subset d3 into east and west coast components
east <- subset(d3, coast ==  "East")
west <- subset(d3, coast == "West")
# Take the mean of the east coast and west coast
eastMean <- mean(east$migration)
westMean <- mean(west$migration)
# The east coast has a mean migration rate of 2.47, while the west coast has a mean migration rate of 3.29
print(paste("East:", toString(eastMean)))
print(paste("West", toString(westMean)))
t.test(x = east, mu = 2.4)
t.test(x = east$migration, mu = 2.4)
t.test(x = west$migration, mu = 2.4)
# Import main dataset
d3 <- read.csv(file = "http://faraway.neu.edu/data/assn2_dataset3.csv")
head(d3)
## Although it's not perfectly normal, question assumes that the data is normally distributed
hist(d3$migration, main = "Histogram of Migration Values", xlab = "Migration Values")
qqnorm(d3$migration); qqline(d3$migration, col = "red")
# Define a one-line function that takes in a numeric vector and returns the standard error of that vector
se <- function(x) sqrt(var(x)/length(x))
# Find the standard errors of east and west migration
seEast <- se(east$migration)
seWest <- se(west$migration)
# Define a function that takes in a numeric vector and returns the 95% confidence interval of that vector
conInt <- function(x) c(mean(x) - (qnorm(0.975) * se(x)), mean(x) + (qnorm(0.975) * se(x)))
# Find the confidence intervals of east and west migration
confEast <- conInt(east$migration)
confWest <- conInt(west$migration)
# Make a barplot of the mean migration values for east and west
my_bar <- barplot(c(eastMean, westMean), xlab = "Location", names.arg = c("East Coast", "West Coast"), ylim = c(0, 5))
#arrows(x0 = my_bar, y0 = c(controlInt[1], vaccineInt[1]) , x1 = my_bar, y1 = c(controlInt[2], vaccineInt[2]), angle = 90, code = 3)
# Define a one-line function that takes in a numeric vector and returns the standard error of that vector
se <- function(x) sqrt(var(x)/length(x))
# Find the standard errors of east and west migration
seEast <- se(east$migration)
seWest <- se(west$migration)
# Define a function that takes in a numeric vector and returns the 95% confidence interval of that vector
conInt <- function(x) c(mean(x) - (qnorm(0.975) * se(x)), mean(x) + (qnorm(0.975) * se(x)))
# Find the confidence intervals of east and west migration
confEast <- conInt(east$migration)
confWest <- conInt(west$migration)
# Make a barplot of the mean migration values for east and west
my_bar <- barplot(c(eastMean, westMean), xlab = "Location", ylab = "Migration Rate (km/year)" names.arg = c("East Coast", "West Coast"), ylim = c(0, 5))
# Define a one-line function that takes in a numeric vector and returns the standard error of that vector
se <- function(x) sqrt(var(x)/length(x))
# Find the standard errors of east and west migration
seEast <- se(east$migration)
seWest <- se(west$migration)
# Define a function that takes in a numeric vector and returns the 95% confidence interval of that vector
conInt <- function(x) c(mean(x) - (qnorm(0.975) * se(x)), mean(x) + (qnorm(0.975) * se(x)))
# Find the confidence intervals of east and west migration
confEast <- conInt(east$migration)
confWest <- conInt(west$migration)
# Make a barplot of the mean migration values for east and west
my_bar <- barplot(c(eastMean, westMean), xlab = "Location", ylab = "Migration Rate (km/year)", names.arg = c("East Coast", "West Coast"), ylim = c(0, 5))
#arrows(x0 = my_bar, y0 = c(controlInt[1], vaccineInt[1]) , x1 = my_bar, y1 = c(controlInt[2], vaccineInt[2]), angle = 90, code = 3)
# Define a one-line function that takes in a numeric vector and returns the standard error of that vector
se <- function(x) sqrt(var(x)/length(x))
# Find the standard errors of east and west migration
seEast <- se(east$migration)
seWest <- se(west$migration)
# Define a function that takes in a numeric vector and returns the 95% confidence interval of that vector
conInt <- function(x) c(mean(x) - (qnorm(0.975) * se(x)), mean(x) + (qnorm(0.975) * se(x)))
# Find the confidence intervals of east and west migration
confEast <- conInt(east$migration)
confWest <- conInt(west$migration)
# Make a barplot of the mean migration values for east and west
my_bar <- barplot(c(eastMean, westMean), xlab = "Location", ylab = "Migration Rate (km/year)", main = "Coastal Bird Migration Rates" names.arg = c("East Coast", "West Coast"), ylim = c(0, 5))
# Define a one-line function that takes in a numeric vector and returns the standard error of that vector
se <- function(x) sqrt(var(x)/length(x))
# Find the standard errors of east and west migration
seEast <- se(east$migration)
seWest <- se(west$migration)
# Define a function that takes in a numeric vector and returns the 95% confidence interval of that vector
conInt <- function(x) c(mean(x) - (qnorm(0.975) * se(x)), mean(x) + (qnorm(0.975) * se(x)))
# Find the confidence intervals of east and west migration
confEast <- conInt(east$migration)
confWest <- conInt(west$migration)
# Make a barplot of the mean migration values for east and west
my_bar <- barplot(c(eastMean, westMean), xlab = "Location", ylab = "Migration Rate (km/year)", main = "Coastal Bird Migration Rates", names.arg = c("East Coast", "West Coast"), ylim = c(0, 5))
#arrows(x0 = my_bar, y0 = c(controlInt[1], vaccineInt[1]) , x1 = my_bar, y1 = c(controlInt[2], vaccineInt[2]), angle = 90, code = 3)
# Define a one-line function that takes in a numeric vector and returns the standard error of that vector
se <- function(x) sqrt(var(x)/length(x))
# Find the standard errors of east and west migration
seEast <- se(east$migration)
seWest <- se(west$migration)
# Define a function that takes in a numeric vector and returns the 95% confidence interval of that vector
conInt <- function(x) c(mean(x) - (qnorm(0.975) * se(x)), mean(x) + (qnorm(0.975) * se(x)))
# Find the confidence intervals of east and west migration
confEast <- conInt(east$migration)
confWest <- conInt(west$migration)
# Make a barplot of the mean migration values for east and west
migration_bar <- barplot(c(eastMean, westMean), xlab = "Location", ylab = "Migration Rate (km/year)", main = "Coastal Bird Migration Rates", names.arg = c("East Coast", "West Coast"), ylim = c(0, 5))
arrows(x0 = migration_bar, y0 = c(confEast[1], confWest[1]) , x1 = my_bar, y1 = c(confEast[2], confWest[2]), angle = 90, code = 3)
library(cars)
install.packages("cars")
library(cars)
library(car)
R.Version()
# Define a one-line function that takes in a numeric vector and returns the standard error of that vector
se <- function(x) sqrt(var(x)/length(x))
# Find the standard errors of east and west migration
seEast <- se(east$migration)
seWest <- se(west$migration)
# Define a function that takes in a numeric vector and returns the 95% confidence interval of that vector
conInt <- function(x) c(mean(x) - (qnorm(0.975) * se(x)), mean(x) + (qnorm(0.975) * se(x)))
# Find the confidence intervals of east and west migration
confEast <- conInt(east$migration)
confWest <- conInt(west$migration)
# Make a barplot of the mean migration values for east and west
migration_bar <- barplot(c(eastMean, westMean), xlab = "Location", ylab = "Migration Rate (km/year)", main = "Coastal Bird Migration Rates", names.arg = c("East Coast", "West Coast"), ylim = c(0, 5))
abline(h = 2.4)
arrows(x0 = migration_bar, y0 = c(confEast[1], confWest[1]) , x1 = my_bar, y1 = c(confEast[2], confWest[2]), angle = 90, code = 3)
# Define a one-line function that takes in a numeric vector and returns the standard error of that vector
se <- function(x) sqrt(var(x)/length(x))
# Find the standard errors of east and west migration
seEast <- se(east$migration)
seWest <- se(west$migration)
# Define a function that takes in a numeric vector and returns the 95% confidence interval of that vector
conInt <- function(x) c(mean(x) - (qnorm(0.975) * se(x)), mean(x) + (qnorm(0.975) * se(x)))
# Find the confidence intervals of east and west migration
confEast <- conInt(east$migration)
confWest <- conInt(west$migration)
# Make a barplot of the mean migration values for east and west
migration_bar <- barplot(c(eastMean, westMean), xlab = "Location", ylab = "Migration Rate (km/year)", main = "Coastal Bird Migration Rates", names.arg = c("East Coast", "West Coast"), ylim = c(0, 5))
abline(h = 2.4, col = "red")
arrows(x0 = migration_bar, y0 = c(confEast[1], confWest[1]) , x1 = my_bar, y1 = c(confEast[2], confWest[2]), angle = 90, code = 3)
abline(h = 2.4, col = "red", lwd = 3)
# Define a one-line function that takes in a numeric vector and returns the standard error of that vector
se <- function(x) sqrt(var(x)/length(x))
# Find the standard errors of east and west migration
seEast <- se(east$migration)
seWest <- se(west$migration)
# Define a function that takes in a numeric vector and returns the 95% confidence interval of that vector
conInt <- function(x) c(mean(x) - (qnorm(0.975) * se(x)), mean(x) + (qnorm(0.975) * se(x)))
# Find the confidence intervals of east and west migration
confEast <- conInt(east$migration)
confWest <- conInt(west$migration)
# Make a barplot of the mean migration values for east and west
migration_bar <- barplot(c(eastMean, westMean), xlab = "Location", ylab = "Migration Rate (km/year)", main = "Coastal Bird Migration Rates", names.arg = c("East Coast", "West Coast"), ylim = c(0, 5))
abline(h = 2.4, col = "red", lwd = 3)
arrows(x0 = migration_bar, y0 = c(confEast[1], confWest[1]) , x1 = my_bar, y1 = c(confEast[2], confWest[2]), angle = 90, code = 3)
library(car)
leveneTest(east$migration, west$migration)
?leveneTest
library(car)
y <- c(east$migration, west$migration)
group <- as.factor(c(rep(1, length(east$migration)), rep(2, length(west$migration))))
leveneTest(y, group)
sd(east$migration)
sd(west$migration)
sd(west$migration)^2
levenTest(d3$migration ~ d3$coast)
leveneTest(d3$migration ~ d3$coast)
leveneTest(d3$migration ~ d3$coast)
library(car)
# The variances appear unequal
print(paste("East:", sd(east$migration)^2 ))
print(paste("West", sd(west$migration)^2))
leveneTest(d3$migration ~ d3$coast)
?t.test
t.test(east$migration, west$migration, var.equal = FALSE)
